/*default css*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/*για το shaking bug με το scrollbar*/
html {
    overflow-y: hidden;
}

body {
    /*1vh σημαινει 1% της οθονης του χρηστη*/
    height: 100vh;
    background-color: lightcyan;
    /*για να βαλουμε σε διαταξη το grid και τα lives*/
    display: flex;
    /*The main axis in flexbox is defined by the direction set by the flex-direction property.
    Εμεις επιλεγουμε column για να παει το grid κατω απ το 1o item του flexbox, που ειναι το lives, και οχι διπλα*/
    flex-direction: column;
    /*defines how the browser distributes space between and around content items along the main-axis of
    a flex container, and the inline axis of a grid container*/
    justify-content: center;
    /*τοποθετει το content στο κεντρο του body*/
    align-items: center;
}

section {
    display: grid;
    /*
    - 4 στηλες με αποσταση 2rem gap μεταξυ τους η καθεμια και 4 σειρες ομοιως
    - τα 8rem ειναι το ποσο χωρο πιανουν τα grid boxes της καθε στηλης/σειρας
    - 1rem equals the font size of the html element, which for most browsers has a default value of 16px*/
    grid-template-columns: repeat(4, 8rem);
    grid-template-rows: repeat(4, 8rem);
    grid-gap: 2rem;
    /*δινει ενα 3d perspective στο γυρισμα των κουτιων, το χρησιμοποιουμε μαζι με το transform-style: preserve-3d*/
    perspective: 800px;
}

.card {
    /*δες ακριβως απο κατω στο position:absolute επεξηγηση*/
    position: relative;
    /*transform-style: sets whether children of an element are positioned in the 3D space or are flattened 
    in the plane of the element. We use it to have that 3d effect of a front and a back cover for our card.
    Για να δουλεψει, πρεπει οπωσδηποτε να εχει ο parent του perspective.*/
    transform-style: preserve-3d;
    /*https://thoughtbot.com/blog/transitions-and-transforms
    transition: [property] [duration] [timing-function] [delay]; (the first two properties are required)
    (1) The transition-duration property specifies the time span of the transition.
    (2) The transition-property specifies the CSS property where the transition will be applied. 
    You may apply a transition to an individual property (e.g., background-color or tranform) or to "all" properties 
    in the rule-set (i.e., all).
    (3) The transition-timing-function property allows you to define the speed of the transition over the duration. 
    The default timing is ease, which starts out slow, quickly speeds up, and then slows down at the end. 
    The other timing options are: linear, ease, ease-in, ease-out, and ease-in-out.
    >> Ολα αυτα τα properties μπορουν να συνδυαστουν σε μια γραμμη με κοινη ονομασια "transition" οπως εχουμε κανει πανω
    στο transform αλλα και κατω στο transition.
    (4) Οσο για το cubic-bezier, προκειται για μια advanced επιλογη για timing, με την οποια μπορεις να καθορισεις ενα
    custom timing function. Π.χ το να γραψουμε "ease" ειναι ισοδυναμο με το να γραφαμε cubic-bezier(0.25, 0.1, 0.25, 1).
    Περισσοτερα εδω: https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function*/
    transition: all 2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 15px;
}

.face, .back {
    /*100% σημαινει πως θελουμε να ειναι ακριβως οσο μεγαλο ειναι και το parent element, δηλ. το card*/
    width: 100%;
    height: 100%;
    /*Τα position δουλευουν ως εξης:
    (1) Με absolute, οπως τα το .face, .back., το element θα γινει positioned relative στο κοντινοτερο POSITIONED parent 
    element. Κοιταει πρωτα στον parent του, αν δεν εχει εκεινος τοτε κοιταει στον parent του parent κτλ.
    Αν δεν εχει κανενας parent του position property (οποιοδηποτε εκτος απο static το οποιο ειναι το default), τοτε 
    κοιταει το βασικο html element. Το absolute επιτρεπει και overlap, το οποιο θελουμε να κανουν και οι πλευρες της 
    καρτας, γι αυτο και το επιλεγουμε.
    (2) Με relative, το element θα γινει positioned relative με το original position του ιδιου. Λειτουργει σαν static,
    μονο που μπορουμε να πειραξουμε τα top, left, bottom, right properties του και να του αλλαξουμε θεση σχετικα με την
    αρχικη του. Η κυρια χρηση του position:relative σε ενα element, ειναι οταν θελουμε μεσα σε αυτο το element να εχουμε
    ενα ή περισσοτερα στοιχεια με position:absolute
    (3) Το fixed ειναι οπως το absolute με τη διαφορα οτι ακολουθει το scroll down και φαινεται παντα στην οθονη.
    (4) Το sticky ειναι σαν relative και fixed μαζι. Οσο φαινεται στην αρχικη οθονη, ειναι relative. Τη στιγμη που παει
    να βγει απ την οθονη με το scroll down, μετατρεπεται σε fixed και αρα ακολουθει το scroll down.*/
    position: absolute;
    /*για να μην κανει select αυτο το επιπεδο με το click, αλλα το parent τους που ειναι το card*/
    pointer-events: none;
}
.face {
    /*to avoid mirroring of the original image due to the 180 degrees rotation*/
    transform: scaleX(-1);
}
.back {
    background: white;
    /*defines whether or not the back face of an element should be visible when facing the user.
    The back face of an element is a mirror image of the front face being displayed.
    Εφοσον εμεις θελουμε με το rotate να φαινεται το front κομματι, θελουμε να κρυβουμε το back,
    γι αυτο και βαζουμε hidden.*/
    backface-visibility: hidden;
}

.toggleCard {
    transform: rotateY(180deg);
}